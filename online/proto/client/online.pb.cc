// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "online.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace onlineproto {

namespace {

const ::google::protobuf::Descriptor* cs_keep_live_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_keep_live_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_keep_live_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_keep_live_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_online_2eproto() {
  protobuf_AddDesc_online_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "online.proto");
  GOOGLE_CHECK(file != NULL);
  cs_keep_live_descriptor_ = file->message_type(0);
  static const int cs_keep_live_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_keep_live, time_),
  };
  cs_keep_live_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_keep_live_descriptor_,
      cs_keep_live::default_instance_,
      cs_keep_live_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_keep_live, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_keep_live, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_keep_live));
  sc_keep_live_descriptor_ = file->message_type(1);
  static const int sc_keep_live_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_keep_live, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_keep_live, server_time_),
  };
  sc_keep_live_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_keep_live_descriptor_,
      sc_keep_live::default_instance_,
      sc_keep_live_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_keep_live, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_keep_live, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_keep_live));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_online_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_keep_live_descriptor_, &cs_keep_live::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_keep_live_descriptor_, &sc_keep_live::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_online_2eproto() {
  delete cs_keep_live::default_instance_;
  delete cs_keep_live_reflection_;
  delete sc_keep_live::default_instance_;
  delete sc_keep_live_reflection_;
}

void protobuf_AddDesc_online_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014online.proto\022\013onlineproto\"\034\n\014cs_keep_l"
    "ive\022\014\n\004time\030\001 \002(\r\"1\n\014sc_keep_live\022\014\n\004tim"
    "e\030\001 \002(\r\022\023\n\013server_time\030\002 \002(\r", 108);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "online.proto", &protobuf_RegisterTypes);
  cs_keep_live::default_instance_ = new cs_keep_live();
  sc_keep_live::default_instance_ = new sc_keep_live();
  cs_keep_live::default_instance_->InitAsDefaultInstance();
  sc_keep_live::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_online_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_online_2eproto {
  StaticDescriptorInitializer_online_2eproto() {
    protobuf_AddDesc_online_2eproto();
  }
} static_descriptor_initializer_online_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int cs_keep_live::kTimeFieldNumber;
#endif  // !_MSC_VER

cs_keep_live::cs_keep_live()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_keep_live::InitAsDefaultInstance() {
}

cs_keep_live::cs_keep_live(const cs_keep_live& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_keep_live::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_keep_live::~cs_keep_live() {
  SharedDtor();
}

void cs_keep_live::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cs_keep_live::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_keep_live::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_keep_live_descriptor_;
}

const cs_keep_live& cs_keep_live::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_online_2eproto();  return *default_instance_;
}

cs_keep_live* cs_keep_live::default_instance_ = NULL;

cs_keep_live* cs_keep_live::New() const {
  return new cs_keep_live;
}

void cs_keep_live::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_keep_live::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cs_keep_live::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_keep_live::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_keep_live::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_keep_live::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_keep_live* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_keep_live*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_keep_live::MergeFrom(const cs_keep_live& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_keep_live::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_keep_live::CopyFrom(const cs_keep_live& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_keep_live::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void cs_keep_live::Swap(cs_keep_live* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_keep_live::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_keep_live_descriptor_;
  metadata.reflection = cs_keep_live_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_keep_live::kTimeFieldNumber;
const int sc_keep_live::kServerTimeFieldNumber;
#endif  // !_MSC_VER

sc_keep_live::sc_keep_live()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_keep_live::InitAsDefaultInstance() {
}

sc_keep_live::sc_keep_live(const sc_keep_live& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_keep_live::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  server_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_keep_live::~sc_keep_live() {
  SharedDtor();
}

void sc_keep_live::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sc_keep_live::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_keep_live::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_keep_live_descriptor_;
}

const sc_keep_live& sc_keep_live::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_online_2eproto();  return *default_instance_;
}

sc_keep_live* sc_keep_live::default_instance_ = NULL;

sc_keep_live* sc_keep_live::New() const {
  return new sc_keep_live;
}

void sc_keep_live::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    server_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_keep_live::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_time;
        break;
      }
      
      // required uint32 server_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_time_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_keep_live::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }
  
  // required uint32 server_time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_keep_live::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }
  
  // required uint32 server_time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_keep_live::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }
    
    // required uint32 server_time = 2;
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_keep_live::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_keep_live* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_keep_live*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_keep_live::MergeFrom(const sc_keep_live& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_time(from.time());
    }
    if (from._has_bit(1)) {
      set_server_time(from.server_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_keep_live::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_keep_live::CopyFrom(const sc_keep_live& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_keep_live::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void sc_keep_live::Swap(sc_keep_live* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(server_time_, other->server_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_keep_live::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_keep_live_descriptor_;
  metadata.reflection = sc_keep_live_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace onlineproto

// @@protoc_insertion_point(global_scope)
