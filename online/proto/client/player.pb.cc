// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "player.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace onlineproto {

namespace {

const ::google::protobuf::Descriptor* cs_notify_player_update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cs_notify_player_update_reflection_ = NULL;
const ::google::protobuf::Descriptor* sc_notify_player_update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sc_notify_player_update_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_player_2eproto() {
  protobuf_AddDesc_player_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "player.proto");
  GOOGLE_CHECK(file != NULL);
  cs_notify_player_update_descriptor_ = file->message_type(0);
  static const int cs_notify_player_update_offsets_[1] = {
  };
  cs_notify_player_update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cs_notify_player_update_descriptor_,
      cs_notify_player_update::default_instance_,
      cs_notify_player_update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_notify_player_update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cs_notify_player_update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cs_notify_player_update));
  sc_notify_player_update_descriptor_ = file->message_type(1);
  static const int sc_notify_player_update_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_notify_player_update, player_),
  };
  sc_notify_player_update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sc_notify_player_update_descriptor_,
      sc_notify_player_update::default_instance_,
      sc_notify_player_update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_notify_player_update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sc_notify_player_update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sc_notify_player_update));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_player_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cs_notify_player_update_descriptor_, &cs_notify_player_update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sc_notify_player_update_descriptor_, &sc_notify_player_update::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_player_2eproto() {
  delete cs_notify_player_update::default_instance_;
  delete cs_notify_player_update_reflection_;
  delete sc_notify_player_update::default_instance_;
  delete sc_notify_player_update_reflection_;
}

void protobuf_AddDesc_player_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::onlineproto::protobuf_AddDesc_data_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014player.proto\022\013onlineproto\032\ndata.proto\""
    "\031\n\027cs_notify_player_update\"E\n\027sc_notify_"
    "player_update\022*\n\006player\030\001 \002(\0132\032.onlinepr"
    "oto.player_data_t", 137);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "player.proto", &protobuf_RegisterTypes);
  cs_notify_player_update::default_instance_ = new cs_notify_player_update();
  sc_notify_player_update::default_instance_ = new sc_notify_player_update();
  cs_notify_player_update::default_instance_->InitAsDefaultInstance();
  sc_notify_player_update::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_player_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_player_2eproto {
  StaticDescriptorInitializer_player_2eproto() {
    protobuf_AddDesc_player_2eproto();
  }
} static_descriptor_initializer_player_2eproto_;


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

cs_notify_player_update::cs_notify_player_update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cs_notify_player_update::InitAsDefaultInstance() {
}

cs_notify_player_update::cs_notify_player_update(const cs_notify_player_update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cs_notify_player_update::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cs_notify_player_update::~cs_notify_player_update() {
  SharedDtor();
}

void cs_notify_player_update::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cs_notify_player_update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cs_notify_player_update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cs_notify_player_update_descriptor_;
}

const cs_notify_player_update& cs_notify_player_update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();  return *default_instance_;
}

cs_notify_player_update* cs_notify_player_update::default_instance_ = NULL;

cs_notify_player_update* cs_notify_player_update::New() const {
  return new cs_notify_player_update;
}

void cs_notify_player_update::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cs_notify_player_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void cs_notify_player_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cs_notify_player_update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cs_notify_player_update::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cs_notify_player_update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cs_notify_player_update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cs_notify_player_update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cs_notify_player_update::MergeFrom(const cs_notify_player_update& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cs_notify_player_update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cs_notify_player_update::CopyFrom(const cs_notify_player_update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cs_notify_player_update::IsInitialized() const {
  
  return true;
}

void cs_notify_player_update::Swap(cs_notify_player_update* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cs_notify_player_update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cs_notify_player_update_descriptor_;
  metadata.reflection = cs_notify_player_update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sc_notify_player_update::kPlayerFieldNumber;
#endif  // !_MSC_VER

sc_notify_player_update::sc_notify_player_update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sc_notify_player_update::InitAsDefaultInstance() {
  player_ = const_cast< ::onlineproto::player_data_t*>(&::onlineproto::player_data_t::default_instance());
}

sc_notify_player_update::sc_notify_player_update(const sc_notify_player_update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sc_notify_player_update::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sc_notify_player_update::~sc_notify_player_update() {
  SharedDtor();
}

void sc_notify_player_update::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
  }
}

void sc_notify_player_update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sc_notify_player_update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sc_notify_player_update_descriptor_;
}

const sc_notify_player_update& sc_notify_player_update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_player_2eproto();  return *default_instance_;
}

sc_notify_player_update* sc_notify_player_update::default_instance_ = NULL;

sc_notify_player_update* sc_notify_player_update::New() const {
  return new sc_notify_player_update;
}

void sc_notify_player_update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (player_ != NULL) player_->::onlineproto::player_data_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sc_notify_player_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .onlineproto.player_data_t player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sc_notify_player_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .onlineproto.player_data_t player = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sc_notify_player_update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .onlineproto.player_data_t player = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sc_notify_player_update::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .onlineproto.player_data_t player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sc_notify_player_update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sc_notify_player_update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sc_notify_player_update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sc_notify_player_update::MergeFrom(const sc_notify_player_update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_player()->::onlineproto::player_data_t::MergeFrom(from.player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sc_notify_player_update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sc_notify_player_update::CopyFrom(const sc_notify_player_update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sc_notify_player_update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_player()) {
    if (!this->player().IsInitialized()) return false;
  }
  return true;
}

void sc_notify_player_update::Swap(sc_notify_player_update* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sc_notify_player_update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sc_notify_player_update_descriptor_;
  metadata.reflection = sc_notify_player_update_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace onlineproto

// @@protoc_insertion_point(global_scope)
